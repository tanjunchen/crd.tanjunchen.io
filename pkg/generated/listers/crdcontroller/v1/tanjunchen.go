/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "crd.tanjunchen.io/pkg/apis/crdcontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TanjunchenLister helps list Tanjunchens.
type TanjunchenLister interface {
	// List lists all Tanjunchens in the indexer.
	List(selector labels.Selector) (ret []*v1.Tanjunchen, err error)
	// Tanjunchens returns an object that can list and get Tanjunchens.
	Tanjunchens(namespace string) TanjunchenNamespaceLister
	TanjunchenListerExpansion
}

// tanjunchenLister implements the TanjunchenLister interface.
type tanjunchenLister struct {
	indexer cache.Indexer
}

// NewTanjunchenLister returns a new TanjunchenLister.
func NewTanjunchenLister(indexer cache.Indexer) TanjunchenLister {
	return &tanjunchenLister{indexer: indexer}
}

// List lists all Tanjunchens in the indexer.
func (s *tanjunchenLister) List(selector labels.Selector) (ret []*v1.Tanjunchen, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Tanjunchen))
	})
	return ret, err
}

// Tanjunchens returns an object that can list and get Tanjunchens.
func (s *tanjunchenLister) Tanjunchens(namespace string) TanjunchenNamespaceLister {
	return tanjunchenNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TanjunchenNamespaceLister helps list and get Tanjunchens.
type TanjunchenNamespaceLister interface {
	// List lists all Tanjunchens in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Tanjunchen, err error)
	// Get retrieves the Tanjunchen from the indexer for a given namespace and name.
	Get(name string) (*v1.Tanjunchen, error)
	TanjunchenNamespaceListerExpansion
}

// tanjunchenNamespaceLister implements the TanjunchenNamespaceLister
// interface.
type tanjunchenNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Tanjunchens in the indexer for a given namespace.
func (s tanjunchenNamespaceLister) List(selector labels.Selector) (ret []*v1.Tanjunchen, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Tanjunchen))
	})
	return ret, err
}

// Get retrieves the Tanjunchen from the indexer for a given namespace and name.
func (s tanjunchenNamespaceLister) Get(name string) (*v1.Tanjunchen, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("tanjunchen"), name)
	}
	return obj.(*v1.Tanjunchen), nil
}
